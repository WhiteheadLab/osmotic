F_rathbuni_norm_counts<-counts(cds,normalized=TRUE)
id<-rownames(F_rathbuni_norm_counts)
F_rathbuni_norm_counts<-cbind(F_rathbuni_norm_counts,id)
# merge res1, res2, res3 with counts
# "BW","FW"
res1_df<-as.data.frame(res.1)
colnames(res1_df)<-paste(colnames(res1_df),"BW_FW", sep='.')
id<-rownames(res1_df)
res1_df<-cbind(res1_df,id)
# "transfer","FW"
res2_df<-as.data.frame(res.2)
colnames(res2_df)<-paste(colnames(res2_df),"transfer_FW", sep='.')
id<-rownames(res2_df)
res2_df<-cbind(res2_df,id)
# "transfer","BW"
res3_df<-as.data.frame(res.3)
colnames(res3_df)<-paste(colnames(res3_df),"transfer_BW", sep='.')
id<-rownames(res3_df)
res3_df<-cbind(res3_df,id)
F_rathbuni_res<-merge(F_rathbuni_norm_counts,res1_df,by="id")
F_rathbuni_res<-merge(F_rathbuni_res,res2_df,by="id")
F_rathbuni_res<-merge(F_rathbuni_res,res3_df,by="id")
dim(F_rathbuni_res)
F_rathbuni_res<-F_rathbuni_res[complete.cases(F_rathbuni_res),]
dim(F_rathbuni_res)
F_rathbuni_annotated<-merge(F_rathbuni_res,annotation,by="id")
F_rathbuni_annotated<-F_rathbuni_annotated[,c(ncol(F_rathbuni_annotated),1:(ncol(F_rathbuni_annotated)-1))]
write.csv(F_rathbuni_annotated,"F_rathbuni_results_all.csv")
plot(log2(res.1$baseMean), res.1$log2FoldChange,
col=ifelse(res.1$padj < 0.05, "red","gray67"),
main="F. heteroclitus.MDPL (BW vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.2$baseMean), res.2$log2FoldChange,
col=ifelse(res.2$padj < 0.05, "red","gray67"),
main="F. rathbuni (transfer vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.3$baseMean), res.3$log2FoldChange,
col=ifelse(res.3$padj < 0.05, "red","gray67"),
main="F. heteroclitus.MDPL (transfer vs. BW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
m<-res1_filtered$id
length(m)
n<-res2_filtered$id
length(n)
o<-res3_filtered$id
length(o)
setlist <- list(BW_FW=as.vector(m),transfer_FW=as.vector(n),transfer_BW=as.vector(o))
OLlist <- overLapper(setlist=setlist, sep="", type="vennsets")
counts <- sapply(OLlist$Venn_List, length)
vennPlot(counts=counts)
# extract intersections:
names(OLlist$Venn_List)
overlap_BW_FWtransfer_FW<-OLlist$Venn_List$BW_FWtransfer_FW
length(overlap_BW_FWtransfer_FW)
overlap_BW_FWtransfer_BW<-OLlist$Venn_List$BW_FWtransfer_BW
length(overlap_BW_FWtransfer_BW)
overlap_transfer_FWtransfer_BW<-OLlist$Venn_List$transfer_FWtransfer_BW
length(overlap_transfer_FWtransfer_BW)
overlap_BW_FW<-OLlist$Venn_List$BW_FW
length(overlap_BW_FW)
overlap_transfer_FW<-OLlist$Venn_List$transfer_FW
length(overlap_transfer_FW)
overlap_transfer_BW<-OLlist$Venn_List$transfer_BW
length(overlap_transfer_BW)
combined_BW_FW<-intersect(overlap_BW_FW,combined_BW_FW)
length(combined_BW_FW)
combined_transfer_FW<-intersect(overlap_transfer_FW,combined_transfer_FW)
length(combined_transfer_FW)
combined_transfer_BW<-intersect(overlap_transfer_BW,combined_transfer_BW)
length(combined_transfer_BW)
#######
##F_goodei
#######
L_goodei<-data.1[,c(112:120)]
colnames(L_goodei)
col.names<-colnames(L_goodei)
head(L_goodei)
conditions = sapply(strsplit(col.names,"_"),`[`,4)
genus = sapply(strsplit(col.names,"_"),`[`,1)
species = sapply(strsplit(col.names,"_"),`[`,2)
genus_species = paste(genus,species,sep="_")
pop = sapply(strsplit(col.names,"_"),`[`,3)
genus_species_pop = paste(genus_species,pop,sep=".")
genus_species = gsub(".NA", "", genus_species_pop)
ExpDesign <- data.frame(row.names=colnames(L_goodei), condition = conditions,genus_species = genus_species)
ExpDesign
cds<-DESeqDataSetFromMatrix(countData=L_goodei, colData=ExpDesign,design= ~ condition)
cds<-DESeq(cds, betaPrior=FALSE)
log_cds<-rlog(cds)
plotPCAWithSampleNames(log_cds,intgroup="condition",ntop=40000)
res.1<-results(cds,contrast=c("condition","BW","FW"))
dim(res.1)
res.2<-results(cds,contrast=c("condition","transfer","FW"))
res.3<-results(cds,contrast=c("condition","transfer","BW"))
resultsNames(cds)
res1_ordered <-as.data.frame(res.1[order(res.1$padj),])
dim(res1_ordered)
res1_filtered <-subset(res1_ordered,res1_ordered$padj<0.05)
res1_filtered <-subset(res1_filtered,res1_filtered$log2FoldChange>1 | res1_filtered$log2FoldChange< -1)
id<-rownames(res1_filtered)
res1_filtered<-cbind(res1_filtered,id)
dim(res1_filtered)
res2_ordered <-as.data.frame(res.2[order(res.2$padj),])
res2_filtered<-subset(res2_ordered,res2_ordered$padj<0.05)
res2_filtered <-subset(res2_filtered,res2_filtered$log2FoldChange>1 | res2_filtered$log2FoldChange< -1)
id<-rownames(res2_filtered)
res2_filtered<-cbind(res2_filtered,id)
res3_ordered<-as.data.frame(res.3[order(res.3$padj),])
res3_filtered<-subset(res3_ordered,res3_ordered$padj<0.05)
res3_filtered <-subset(res3_filtered,res3_filtered$log2FoldChange>1 | res3_filtered$log2FoldChange< -1)
id<-rownames(res3_filtered)
res3_filtered<-cbind(res3_filtered,id)
# get normalized counts
# add id column
L_goodei_norm_counts<-counts(cds,normalized=TRUE)
id<-rownames(L_goodei_norm_counts)
L_goodei_norm_counts<-cbind(L_goodei_norm_counts,id)
# merge res1, res2, res3 with counts
# "BW","FW"
res1_df<-as.data.frame(res.1)
colnames(res1_df)<-paste(colnames(res1_df),"BW_FW", sep='.')
id<-rownames(res1_df)
res1_df<-cbind(res1_df,id)
# "transfer","FW"
res2_df<-as.data.frame(res.2)
colnames(res2_df)<-paste(colnames(res2_df),"transfer_FW", sep='.')
id<-rownames(res2_df)
res2_df<-cbind(res2_df,id)
# "transfer","BW"
res3_df<-as.data.frame(res.3)
colnames(res3_df)<-paste(colnames(res3_df),"transfer_BW", sep='.')
id<-rownames(res3_df)
res3_df<-cbind(res3_df,id)
L_goodei_res<-merge(L_goodei_norm_counts,res1_df,by="id")
L_goodei_res<-merge(L_goodei_res,res2_df,by="id")
L_goodei_res<-merge(L_goodei_res,res3_df,by="id")
dim(L_goodei_res)
L_goodei_res<-L_goodei_res[complete.cases(L_goodei_res),]
dim(L_goodei_res)
L_goodei_annotated<-merge(L_goodei_res,annotation,by="id")
L_goodei_annotated<-L_goodei_annotated[,c(ncol(L_goodei_annotated),1:(ncol(L_goodei_annotated)-1))]
write.csv(L_goodei_annotated,"L_goodei_results_all.csv")
plot(log2(res.1$baseMean), res.1$log2FoldChange,
col=ifelse(res.1$padj < 0.05, "red","gray67"),
main="L. goodei (BW vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.2$baseMean), res.2$log2FoldChange,
col=ifelse(res.2$padj < 0.05, "red","gray67"),
main="L_goodei (transfer vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.3$baseMean), res.3$log2FoldChange,
col=ifelse(res.3$padj < 0.05, "red","gray67"),
main="F. heteroclitus.MDPL (transfer vs. BW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
m<-res1_filtered$id
length(m)
n<-res2_filtered$id
length(n)
o<-res3_filtered$id
length(o)
setlist <- list(BW_FW=as.vector(m),transfer_FW=as.vector(n),transfer_BW=as.vector(o))
OLlist <- overLapper(setlist=setlist, sep="", type="vennsets")
counts <- sapply(OLlist$Venn_List, length)
vennPlot(counts=counts)
# extract intersections:
names(OLlist$Venn_List)
overlap_BW_FWtransfer_FW<-OLlist$Venn_List$BW_FWtransfer_FW
length(overlap_BW_FWtransfer_FW)
overlap_BW_FWtransfer_BW<-OLlist$Venn_List$BW_FWtransfer_BW
length(overlap_BW_FWtransfer_BW)
overlap_transfer_FWtransfer_BW<-OLlist$Venn_List$transfer_FWtransfer_BW
length(overlap_transfer_FWtransfer_BW)
overlap_BW_FW<-OLlist$Venn_List$BW_FW
length(overlap_BW_FW)
overlap_transfer_FW<-OLlist$Venn_List$transfer_FW
length(overlap_transfer_FW)
overlap_transfer_BW<-OLlist$Venn_List$transfer_BW
length(overlap_transfer_BW)
combined_BW_FW<-intersect(overlap_BW_FW,combined_BW_FW)
length(combined_BW_FW)
combined_transfer_FW<-intersect(overlap_transfer_FW,combined_transfer_FW)
length(combined_transfer_FW)
combined_transfer_BW<-intersect(overlap_transfer_BW,combined_transfer_BW)
length(combined_transfer_BW)
#######
##L_parva
#######
L_parva<-data.1[,c(121:129)]
colnames(L_parva)
col.names<-colnames(L_parva)
head(L_parva)
conditions = sapply(strsplit(col.names,"_"),`[`,4)
genus = sapply(strsplit(col.names,"_"),`[`,1)
species = sapply(strsplit(col.names,"_"),`[`,2)
genus_species = paste(genus,species,sep="_")
pop = sapply(strsplit(col.names,"_"),`[`,3)
genus_species_pop = paste(genus_species,pop,sep=".")
genus_species = gsub(".NA", "", genus_species_pop)
ExpDesign <- data.frame(row.names=colnames(L_parva), condition = conditions,genus_species = genus_species)
ExpDesign
cds<-DESeqDataSetFromMatrix(countData=L_parva, colData=ExpDesign,design= ~ condition)
cds<-DESeq(cds, betaPrior=FALSE)
log_cds<-rlog(cds)
plotPCAWithSampleNames(log_cds,intgroup="condition",ntop=40000)
res.1<-results(cds,contrast=c("condition","BW","FW"))
dim(res.1)
res.2<-results(cds,contrast=c("condition","transfer","FW"))
res.3<-results(cds,contrast=c("condition","transfer","BW"))
resultsNames(cds)
res1_ordered <-as.data.frame(res.1[order(res.1$padj),])
dim(res1_ordered)
res1_filtered <-subset(res1_ordered,res1_ordered$padj<0.05)
res1_filtered <-subset(res1_filtered,res1_filtered$log2FoldChange>1 | res1_filtered$log2FoldChange< -1)
id<-rownames(res1_filtered)
res1_filtered<-cbind(res1_filtered,id)
dim(res1_filtered)
res2_ordered <-as.data.frame(res.2[order(res.2$padj),])
res2_filtered<-subset(res2_ordered,res2_ordered$padj<0.05)
res2_filtered <-subset(res2_filtered,res2_filtered$log2FoldChange>1 | res2_filtered$log2FoldChange< -1)
id<-rownames(res2_filtered)
res2_filtered<-cbind(res2_filtered,id)
res3_ordered<-as.data.frame(res.3[order(res.3$padj),])
res3_filtered<-subset(res3_ordered,res3_ordered$padj<0.05)
res3_filtered <-subset(res3_filtered,res3_filtered$log2FoldChange>1 | res3_filtered$log2FoldChange< -1)
id<-rownames(res3_filtered)
res3_filtered<-cbind(res3_filtered,id)
# get normalized counts
# add id column
L_parva_norm_counts<-counts(cds,normalized=TRUE)
id<-rownames(L_parva_norm_counts)
L_parva_norm_counts<-cbind(L_parva_norm_counts,id)
# merge res1, res2, res3 with counts
# "BW","FW"
res1_df<-as.data.frame(res.1)
colnames(res1_df)<-paste(colnames(res1_df),"BW_FW", sep='.')
id<-rownames(res1_df)
res1_df<-cbind(res1_df,id)
# "transfer","FW"
res2_df<-as.data.frame(res.2)
colnames(res2_df)<-paste(colnames(res2_df),"transfer_FW", sep='.')
id<-rownames(res2_df)
res2_df<-cbind(res2_df,id)
# "transfer","BW"
res3_df<-as.data.frame(res.3)
colnames(res3_df)<-paste(colnames(res3_df),"transfer_BW", sep='.')
id<-rownames(res3_df)
res3_df<-cbind(res3_df,id)
L_parva_res<-merge(L_parva_norm_counts,res1_df,by="id")
L_parva_res<-merge(L_parva_res,res2_df,by="id")
L_parva_res<-merge(L_parva_res,res3_df,by="id")
dim(L_parva_res)
L_parva_res<-L_parva_res[complete.cases(L_parva_res),]
dim(L_parva_res)
L_parva_annotated<-merge(L_parva_res,annotation,by="id")
L_parva_annotated<-L_parva_annotated[,c(ncol(L_parva_annotated),1:(ncol(L_parva_annotated)-1))]
write.csv(L_parva_annotated,"L_parva_results_all.csv")
plot(log2(res.1$baseMean), res.1$log2FoldChange,
col=ifelse(res.1$padj < 0.05, "red","gray67"),
main="L_parva (BW vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.2$baseMean), res.2$log2FoldChange,
col=ifelse(res.2$padj < 0.05, "red","gray67"),
main="L_goodei (transfer vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.3$baseMean), res.3$log2FoldChange,
col=ifelse(res.3$padj < 0.05, "red","gray67"),
main="L. parva (transfer vs. BW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
m<-res1_filtered$id
length(m)
n<-res2_filtered$id
length(n)
o<-res3_filtered$id
length(o)
setlist <- list(BW_FW=as.vector(m),transfer_FW=as.vector(n),transfer_BW=as.vector(o))
OLlist <- overLapper(setlist=setlist, sep="", type="vennsets")
counts <- sapply(OLlist$Venn_List, length)
vennPlot(counts=counts)
# extract intersections:
names(OLlist$Venn_List)
overlap_BW_FWtransfer_FW<-OLlist$Venn_List$BW_FWtransfer_FW
length(overlap_BW_FWtransfer_FW)
overlap_BW_FWtransfer_BW<-OLlist$Venn_List$BW_FWtransfer_BW
length(overlap_BW_FWtransfer_BW)
overlap_transfer_FWtransfer_BW<-OLlist$Venn_List$transfer_FWtransfer_BW
length(overlap_transfer_FWtransfer_BW)
overlap_BW_FW<-OLlist$Venn_List$BW_FW
length(overlap_BW_FW)
overlap_transfer_FW<-OLlist$Venn_List$transfer_FW
length(overlap_transfer_FW)
overlap_transfer_BW<-OLlist$Venn_List$transfer_BW
length(overlap_transfer_BW)
combined_BW_FW<-intersect(overlap_BW_FW,combined_BW_FW)
length(combined_BW_FW)
combined_transfer_FW<-intersect(overlap_transfer_FW,combined_transfer_FW)
length(combined_transfer_FW)
combined_transfer_BW<-intersect(overlap_transfer_BW,combined_transfer_BW)
length(combined_transfer_BW)
m<-combined_BW_FW
length(m)
n<-combined_transfer_FW
length(n)
o<-combined_transfer_BW
length(o)
setlist <- list(BW_FW=as.vector(m),transfer_FW=as.vector(n),transfer_BW=as.vector(o))
OLlist <- overLapper(setlist=setlist, sep="", type="vennsets")
counts <- sapply(OLlist$Venn_List, length)
vennPlot(counts=counts)
overlap_BW_FW_transfer <- OLlist$Venn_List$BW_FWtransfer_FW
overlap_BW_FW_transfer <- intersect(overlap_BW_FW_transfer,OLlist$Venn_List$BW_FWtransfer_BW)
overlap_BW_FW_transfer <- intersect(overlap_BW_FW_transfer,OLlist$Venn_List$transfer_FWtransfer_BW)
overlap_BW_FW_transfer <- intersect(overlap_BW_FW_transfer,OLlist$Venn_List$BW_FWtransfer_FWtransfer_BW)
length(overlap_BW_FW_transfer)
all_overlap<-OLlist$Venn_List$BW_FWtransfer_FWtransfer_BW
length(all_overlap)
names(OLlist$Venn_List)
BW_FW <- OLlist$Venn_List$BW_FW
transfer_FW <- OLlist$Venn_List$transfer_FW
transfer_BW <- OLlist$Venn_List$transfer_BW
############
# Marine
############
# F_heteroclitus.MDPL
sig_counts <- as.data.frame(F_heteroclitus.MDPL_norm_counts)
row.names <- rownames(sig_counts)
sig_counts <- cbind(sig_counts,id=row.names)
dim(sig_counts)
# F_heteroclitus.MDPP
F_heteroclitus.MDPP_counts <- as.data.frame(F_heteroclitus.MDPP_norm_counts)
row.names <- rownames(F_heteroclitus.MDPP_counts)
F_heteroclitus.MDPP_counts <- cbind(F_heteroclitus.MDPP_counts,id=row.names)
sig_counts<-merge(sig_counts,F_heteroclitus.MDPP_counts,by="id")
dim(sig_counts)
# F_grandis
F_grandis_counts <- as.data.frame(F_grandis_norm_counts)
row.names <- rownames(F_grandis_norm_counts)
F_grandis_counts <- cbind(F_grandis_counts,id=row.names)
sig_counts<-merge(sig_counts,F_grandis_counts,by="id")
dim(sig_counts)
# L_parva
L_parva_counts <- as.data.frame(L_parva_norm_counts)
row.names <- rownames(L_parva_counts)
L_parva_counts <- cbind(L_parva_counts,id=row.names)
sig_counts<-merge(sig_counts,L_parva_counts,by="id")
dim(sig_counts)
############
# Brackish
############
# F_chrysotus
F_chrysotus_counts <- as.data.frame(F_chrysotus_norm_counts)
row.names <- rownames(F_chrysotus_counts)
F_chrysotus_counts <- cbind(F_chrysotus_counts,id=row.names)
sig_counts<-merge(sig_counts,F_chrysotus_counts,by="id")
dim(sig_counts)
# F_diaphanus
F_diaphanus_counts <- as.data.frame(F_diaphanus_norm_counts)
row.names <- rownames(F_diaphanus_counts)
F_diaphanus_counts <- cbind(F_diaphanus_counts,id=row.names)
sig_counts<-merge(sig_counts,F_diaphanus_counts,by="id")
dim(sig_counts)
# F_parvapinis
F_parvapinis_counts <- as.data.frame(F_parvapinis_norm_counts)
row.names <- rownames(F_parvapinis_counts)
F_parvapinis_counts <- cbind(F_parvapinis_counts,id=row.names)
sig_counts<-merge(sig_counts,F_parvapinis_counts,by="id")
dim(sig_counts)
############
# Fresh
###########
# F_olivaceous
F_olivaceous_counts<-as.data.frame(F_olivaceous_norm_counts)
row.names<-rownames(F_olivaceous_counts)
F_olivaceous_counts<-cbind(F_olivaceous_counts,id=row.names)
sig_counts<-merge(sig_counts,F_olivaceous_counts,by="id")
dim(sig_counts)
# F_rathbuni
F_rathbuni_counts<-as.data.frame(F_rathbuni_norm_counts)
row.names<-rownames(F_rathbuni_counts)
F_rathbuni_counts<-cbind(F_rathbuni_counts,id=row.names)
sig_counts<-merge(sig_counts,F_rathbuni_counts,by="id")
dim(sig_counts)
# L_goodei
L_goodei_counts<-as.data.frame(L_goodei_norm_counts)
row.names<-rownames(L_goodei_counts)
L_goodei_counts<-cbind(L_goodei,id=row.names)
sig_counts<-merge(sig_counts,L_goodei_counts,by="id")
dim(sig_counts)
head(sig_counts)
#BW_FW <- OLlist$Venn_List$BW_FW
#transfer_FW <- OLlist$Venn_List$transfer_FW
#transfer_BW <- OLlist$Venn_List$transfer_BW
length(BW_FW)
length(transfer_FW)
length(transfer_BW)
F_heteroclitus.MDPL<-data.1[,c(41:49)]
colnames(F_heteroclitus.MDPL)
col.names<-colnames(F_heteroclitus.MDPL)
head(F_heteroclitus.MDPL)
conditions = sapply(strsplit(col.names,"_"),`[`,4)
genus = sapply(strsplit(col.names,"_"),`[`,1)
species = sapply(strsplit(col.names,"_"),`[`,2)
genus_species = paste(genus,species,sep="_")
pop = sapply(strsplit(col.names,"_"),`[`,3)
genus_species_pop = paste(genus_species,pop,sep=".")
genus_species = gsub(".NA", "", genus_species_pop)
ExpDesign <- data.frame(row.names=colnames(F_heteroclitus.MDPL), condition = conditions,genus_species = genus_species)
ExpDesign
cds<-DESeqDataSetFromMatrix(countData=F_heteroclitus.MDPL,
colData=ExpDesign,design= ~ condition)
cds<-DESeq(cds, betaPrior=FALSE)
log_cds<-rlog(cds)
plotPCAWithSampleNames(log_cds,intgroup="condition",ntop=40000)
res.1<-results(cds,contrast=c("condition","BW","FW"))
dim(res.1)
res.2<-results(cds,contrast=c("condition","transfer","FW"))
res.3<-results(cds,contrast=c("condition","transfer","BW"))
resultsNames(cds)
res1_ordered <-as.data.frame(res.1[order(res.1$padj),])
dim(res1_ordered)
res1_filtered <-subset(res1_ordered,res1_ordered$padj<0.05)
res1_filtered <-subset(res1_filtered,res1_filtered$log2FoldChange>1 | res1_filtered$log2FoldChange< -1)
id<-rownames(res1_filtered)
res1_filtered<-cbind(res1_filtered,id)
dim(res1_filtered)
res2_ordered <-as.data.frame(res.2[order(res.2$padj),])
res2_filtered<-subset(res2_ordered,res2_ordered$padj<0.05)
res2_filtered <-subset(res2_filtered,res2_filtered$log2FoldChange>1 | res2_filtered$log2FoldChange< -1)
id<-rownames(res2_filtered)
res2_filtered<-cbind(res2_filtered,id)
res3_ordered<-as.data.frame(res.3[order(res.3$padj),])
res3_filtered<-subset(res3_ordered,res3_ordered$padj<0.05)
res3_filtered <-subset(res3_filtered,res3_filtered$log2FoldChange>1 | res3_filtered$log2FoldChange< -1)
id<-rownames(res3_filtered)
res3_filtered<-cbind(res3_filtered,id)
# get normalized counts
# add id column
F_heteroclitus.MDPL_norm_counts<-counts(cds,normalized=TRUE)
id<-rownames(F_heteroclitus.MDPL_norm_counts)
F_heteroclitus.MDPL_norm_counts<-cbind(F_heteroclitus.MDPL_norm_counts,id)
# merge res1, res2, res3 with counts
# "BW","FW"
res1_df<-as.data.frame(res.1)
colnames(res1_df)<-paste(colnames(res1_df),"BW_FW", sep='.')
id<-rownames(res1_df)
res1_df<-cbind(res1_df,id)
dim(res1_df)
# "transfer","FW"
res2_df<-as.data.frame(res.2)
colnames(res2_df)<-paste(colnames(res2_df),"transfer_FW", sep='.')
id<-rownames(res2_df)
res2_df<-cbind(res2_df,id)
dim(res2_df)
# "transfer","BW"
res3_df<-as.data.frame(res.3)
colnames(res3_df)<-paste(colnames(res3_df),"transfer_BW", sep='.')
id<-rownames(res3_df)
res3_df<-cbind(res3_df,id)
dim(res3_df)
F_heteroclitus.MDPL_res<-merge(F_heteroclitus.MDPL_norm_counts,res1_df,by="id")
dim(F_heteroclitus.MDPL_res)
colnames(F_heteroclitus.MDPL_res)
F_heteroclitus.MDPL_res<-merge(F_heteroclitus.MDPL_res,res2_df,by="id")
dim(F_heteroclitus.MDPL_res)
colnames(F_heteroclitus.MDPL_res)
F_heteroclitus.MDPL_res<-merge(F_heteroclitus.MDPL_res,res3_df,by="id")
dim(F_heteroclitus.MDPL_res)
colnames(F_heteroclitus.MDPL_res)
F_heteroclitus.MDPL_res<-F_heteroclitus.MDPL_res[complete.cases(F_heteroclitus.MDPL_res),]
dim(F_heteroclitus.MDPL_res)
F_heteroclitus.MDPL_annotated<-merge(F_heteroclitus.MDPL_res,annotation,by="id")
F_heteroclitus.MDPL_annotated<-F_heteroclitus.MDPL_annotated[,c(ncol(F_heteroclitus.MDPL_annotated),1:(ncol(F_heteroclitus.MDPL_annotated)-1))]
write.csv(F_heteroclitus.MDPL_annotated,"F_heteroclitus.MDPL_results_all.csv")
plot(log2(res.1$baseMean), res.1$log2FoldChange,
col=ifelse(res.1$padj < 0.05, "red","gray67"),
main="F. heteroclitus.MDPL (BW vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.2$baseMean), res.2$log2FoldChange,
col=ifelse(res.2$padj < 0.05, "red","gray67"),
main="F. heteroclitus.MDPL (transfer vs. FW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
plot(log2(res.3$baseMean), res.3$log2FoldChange,
col=ifelse(res.3$padj < 0.05, "red","gray67"),
main="F. heteroclitus.MDPL (transfer vs. BW) (padj<0.05)",xlim=c(1,15),pch=20,cex=1)
abline(h=c(-1,1), col="blue")
m<-res1_filtered$id
length(m)
n<-res2_filtered$id
length(n)
o<-res3_filtered$id
length(o)
setlist <- list(BW_FW=as.vector(m),transfer_FW=as.vector(n),transfer_BW=as.vector(o))
OLlist <- overLapper(setlist=setlist, sep="", type="vennsets")
counts <- sapply(OLlist$Venn_List, length)
vennPlot(counts=counts)
# extract intersections:
names(OLlist$Venn_List)
overlap_BW_FWtransfer_FW<-OLlist$Venn_List$BW_FWtransfer_FW
length(overlap_BW_FWtransfer_FW)
overlap_BW_FWtransfer_BW<-OLlist$Venn_List$BW_FWtransfer_BW
length(overlap_BW_FWtransfer_BW)
overlap_transfer_FWtransfer_BW<-OLlist$Venn_List$transfer_FWtransfer_BW
length(overlap_transfer_FWtransfer_BW)
F_heteroclitus.MDPL_BW_FW<-OLlist$Venn_List$BW_FW
length(F_heteroclitus.MDPL_BW_FW)
F_heteroclitus.MDPL_transfer_FW<-OLlist$Venn_List$transfer_FW
length(F_heteroclitus.MDPL_transfer_FW)
F_heteroclitus.MDPL_transfer_BW<-OLlist$Venn_List$transfer_BW
length(F_heteroclitus.MDPL_transfer_BW)
plotPCAWithSampleNames(log_cds,intgroup="condition",ntop=40000)
options("device")
dev.off()
dev.off()
